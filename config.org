#+TITLE: Natemacs Config
#+AUTHOR: Nathan Melaku
#+OPTIONS: toc:2

This is Natemacs. My emacs config. My main use case of emacs is mainly Note taking, Frontend development. Simple Java programming, example when studing for ocjp, Inteliij is hard to beat for professional development.

|----+-----------------------------|
| No | Use case                    |
|----+-----------------------------|
|  1 | Note taking                 |
|  2 | Frontend Development        |
|  3 | Simple Java Programming     |
|  4 | Editing configuration files |
|  5 | :TODO Latex                 |
|  6 | Basic File Management       |
|----+-----------------------------|

* General Defaults
Set general variables for sane workflow. ðŸ”¥
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
#+end_src

* Package Management
** Setup package.el to work with MELPA.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-refresh-contents)
  (package-initialize)
#+end_src

** Installing use-package

#+begin_src emacs-lisp
  (unless (package-installed-p  'use-package)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t))
#+end_src

* UI
** Disable unwanted defaults

#+begin_src emacs-lisp

  (setq native-comp-async-report-warnings-errors nil)


  (use-package frame
    :ensure nil
    :bind
    ("C-z" . nil))

  ;; change cursor type and enale line highlighting
  (global-hl-line-mode +1)

  ;; disable unneccessary modes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; add line numbers
  (column-number-mode)

  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type t)
  (dolist (mode '(term-mode-hook
                  vterm-mode-hook
                  eshell-mode-hook
                  org-mode-hook
                  ranger-mode-hook
                  org-agenda-mode-hook
                  image-mode-hook
                  dired-mode-hook
                  markdown-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Set Theme

  #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :config
      (load-theme 'doom-henna t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))

    ;; remove background color on terminal emacs
    (defun on-frame-open (frame)
      (if (not (display-graphic-p frame))
          (set-face-background 'default "unspecified-bg" frame)))
    (on-frame-open (selected-frame))

    (defun on-after-init ()
      (unless (display-graphic-p (selected-frame))
        (set-face-background 'default "unspecified-bg" (selected-frame))))

    (add-hook 'after-make-frame-functions 'on-frame-open)
    (add-hook 'window-setup-hook 'on-after-init)
   #+END_SRC

** Font

  #+BEGIN_SRC emacs-lisp
    ;; set font to FiraCode
    (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font-11"))
  #+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

** Useful Config

#+begin_src emacs-lisp
  (recentf-mode 1)
#+end_src

* Org Mode
** Org bullets

  #+BEGIN_SRC emacs-lisp
    ;; org bullet
    (use-package org-bullets
      :custom
      (org-bullets-bullet-list '("â˜¯" "â—‰" "â—‹" "âœ¸" "âœ¿" "âœœ" "â–¶"))
      (org-ellipsis "â¤µ")
      :hook (org-mode . org-bullets-mode))
  #+END_SRC

** Configure org

#+begin_src emacs-lisp
  (defun nate/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :ensure nil
    :hook (org-mode . nate/org-mode-setup)
    :custom
    (org-directory "~/Documents/Org")
    (org-log-into-drawer t)
    (org-deadline-warning-days 2)
    (org-return-follows-link  t)
    (org-hide-emphasis-markers nil)
    :config
    (setq org-list-demote-modify-bullet
          (quote (("+" . "-")
                  ("-" . "+")
                  ("*" . "-")
                  ("1." . "-")
                  ("1)" . "-")
                  ("A)" . "-")
                  ("B)" . "-")
                  ("a)" . "-")
                  ("b)" . "-")
                  ("A." . "-")
                  ("B." . "-")
                  ("a." . "-")
                  ("b." . "-")))))
#+end_src

#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([+]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â—¦"))))))
#+end_src

** Visual fill column

#+begin_src emacs-lisp
   (defun nate/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . nate/org-mode-visual-fill))
#+end_src

** Org tree slide

#+begin_src emacs-lisp
   (use-package org-tree-slide)
#+end_src

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/Documents/Org/Roam/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+end_src

* Programming Stuff
** Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/Tools/yasnippet"))
    (yas-global-mode 1))
#+END_SRC

** Treesitter

#+begin_src emacs-lisp
  (use-package tree-sitter-langs)
  (use-package tree-sitter
    :init
    (global-tree-sitter-mode)
    :hook
    (tree-sitter-after-on-hook . tree-sitter-hl-mode))
#+end_src

** Editor config

#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+end_src

** Yaml

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** Json

#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src

** lua

#+begin_src emacs-lisp
  (use-package lua-mode)
#+end_src

** Web mode

#+begin_src emacs-lisp
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-attr-indent-offset 0)
  (setq web-mode-enable-auto-indentation t)
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-css-colorization t)
  
  (use-package web-mode
    :mode (("\\.js\\'" . web-mode)
           ("\\.jsx\\'" . web-mode)
           ("\\.ts\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.svelte\\'" . web-mode)
           ("\\.html\\'" . web-mode))
    :commands web-mode)
#+end_src

** Company

#+begin_src emacs-lisp
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)
  (use-package company
    :config (global-company-mode t))
#+end_src

** Magit

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)))
#+end_src

** LSP

#+begin_src emacs-lisp
  (setq lsp-log-io nil)
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-restart 'auto-restart)
  (setq lsp-ui-sideline-show-diagnostics t)
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-diagnostics-providera :flymake)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-position 'at-point)
  (global-set-key (kbd "C-.") #'lsp-ui-peek-find-definitions)

  (use-package lsp-mode
    :hook (
           (web-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration)
           )
    :commands lsp-deferred)

  (use-package lsp-ui
    :commands lsp-ui-mode)

  (global-set-key (kbd "C-c N") #'flymake-goto-next-error)
  (global-set-key (kbd "C-c P") #'flymake-goto-prev-error)
#+end_src

** Prettier js

#+begin_src emacs-lisp
  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
            (funcall (cdr my-pair)))))

  (use-package prettier-js
    :ensure t)
  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.jsx?\\'" . prettier-js-mode))
                               (enable-minor-mode
                                '("\\.tsx?\\'" . prettier-js-mode))))
#+end_src

** Java

#+begin_src emacs-lisp
  (use-package lsp-java)
  (add-hook 'java-mode-hook #'lsp)
#+end_src

** RestClient

#+begin_src emacs-lisp
  (use-package restclient)
#+end_src

* Utils
** Pdf Tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+end_src

** Vterm

#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** All the icons

#+begin_src emacs-lisp
    (use-package all-the-icons
      :if (display-graphic-p))

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Vertico

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)
    ;; Different scroll margin
    (setq vertico-scroll-margin 0)
    (setq vertico-resize t)
    (setq vertico-cycle t))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

** Exec path

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** Expand Region

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("C-=" . er/expand-region)
           ("C--" . er/contract-region)))
#+end_src

** Treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))
#+end_src

** Dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :custom ((dired-listing-switches "-alh --group-directories-first"))
    :hook (dired-mode . dired-hide-details-mode))

  ;; make the other window target
  (setq dired-dwim-target t)

  (use-package diredfl
    :ensure t
    :config
    (diredfl-global-mode 1))

  (use-package dired-git-info
    :ensure t
    :bind (:map dired-mode-map
                (")" . dired-git-info-mode)))

  (use-package dired-single
    :bind (:map dired-mode-map
                ("^" . dired-single-up-directory)
                ("<return>" . dired-single-buffer)))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :bind (:map dired-mode-map
                ("z" . dired-hide-dotfiles-mode)))
#+end_src

** Multiple Cursors

This is not very important but is cool to experiment with.
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<". mc/mark-all-like-this)))
#+end_src

** Emoji

#+begin_src emacs-lisp
    (use-package emojify
      :hook (after-init . global-emojify-mode)
      :config
      (when (member "Segoe UI Variable Static Text" (font-family-list))
        (set-fontset-font
         t 'symbol (font-spec :family "Segoe UI Variable Static Text") nil 'prepend))
      (setq emojify-display-style 'unicode)
      (setq emojify-emoji-styles '(github))
      :bind ("C-c C-." . emojify-insert-emoji))
#+end_src



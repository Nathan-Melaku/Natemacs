#+TITLE: Natemacs Config
#+AUTHOR: Nathan Melaku
#+OPTIONS: toc:2

This is Natemacs, My emacs config. Main use case of emacs is mainly Note taking,
Frontend development, Simple Java programming, example when studing for ocjp.

|----+-----------------------------|
| No | Use case                    |
|----+-----------------------------|
|  1 | Note taking                 |
|  2 | Frontend Development        |
|  3 | Simple Java Programming     |
|  4 | Editing configuration files |
|  5 | :TODO Latex                 |
|  6 | Basic File Management       |
|----+-----------------------------|

* Table Of Contents     :noexport:TOC_2:
- [[#general-defaults][General Defaults]]
- [[#package-management][Package Management]]
  - [[#setup-packageel-to-work-with-melpa][Setup package.el to work with MELPA.]]
- [[#ui][UI]]
  - [[#disable-unwanted-defaults][Disable unwanted defaults]]
  - [[#font][Font]]
  - [[#set-theme][Set Theme]]
  - [[#modeline][Modeline]]
  - [[#useful-config][Useful Config]]
- [[#org-mode][Org Mode]]
  - [[#org-bullets][Org bullets]]
  - [[#configure-org][Configure org]]
  - [[#visual-fill-column][Visual fill column]]
  - [[#org-tree-slide][Org tree slide]]
  - [[#org-roam][Org Roam]]
  - [[#org-toc][Org toc]]
- [[#programming-stuff][Programming Stuff]]
  - [[#yasnippet][Yasnippet]]
  - [[#origami][Origami]]
  - [[#editor-config][Editor config]]
  - [[#projectile][Projectile]]
  - [[#yaml][Yaml]]
  - [[#json][Json]]
  - [[#lua][lua]]
  - [[#web-mode][Web mode]]
  - [[#company][Company]]
  - [[#magit][Magit]]
  - [[#prettier-js][Prettier js]]
  - [[#restclient][RestClient]]
  - [[#devdocs-browser][DevDocs Browser]]
  - [[#docker][Docker]]
- [[#utils][Utils]]
  - [[#pdf-tools][Pdf Tools]]
  - [[#epub][Epub]]
  - [[#vterm][Vterm]]
  - [[#exec-path][Exec path]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#marginalia][Marginalia]]
  - [[#consult][Consult]]
  - [[#which-key][Which Key]]
  - [[#all-the-icons][All the icons]]
  - [[#multiple-cursors][Multiple Cursors]]
  - [[#expand-region][Expand Region]]
  - [[#ace-window][Ace-window]]
  - [[#avy][Avy]]
  - [[#dired][Dired]]
  - [[#image-mode][Image mode]]

* General Defaults

Set general variables for sane workflow. ðŸ”¥
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
#+end_src

* Package Management
** Setup package.el to work with MELPA.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-refresh-contents)
  (package-initialize)
  (eval-and-compile
    (setq use-package-always-ensure t)
    (setq use-package-expand-minimally t))
  
  (cl-defun slot/vc-install (&key (fetcher "github") repo name rev backend)
    "Install a package from a remote if it's not already installed.
  This is a thin wrapper around `package-vc-install' in order to
  make non-interactive usage more ergonomic.  Takes the following
  named arguments:

  - FETCHER the remote where to get the package (e.g., \"gitlab\").
    If omitted, this defaults to \"github\".

  - REPO should be the name of the repository (e.g.,
    \"slotThe/arXiv-citation\".

  - NAME, REV, and BACKEND are as in `package-vc-install' (which
    see)."
    (let* ((url (format "https://www.%s.com/%s" fetcher repo))
	   (iname (when name (intern name)))
	   (pac-name (or iname (intern (file-name-base repo)))))
      (unless (package-installed-p pac-name)
	(package-vc-install url iname rev backend))))

#+end_src

* UI
** Disable unwanted defaults

#+begin_src emacs-lisp

  (setq native-comp-async-report-warnings-errors nil)


  (use-package frame
    :ensure nil
    :bind
    ("C-z" . nil))

  ;; change cursor type and enale line highlighting
  (global-hl-line-mode +1)

  ;; disable unneccessary modes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; add line numbers
  (column-number-mode)

  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type t)
  (dolist (mode '(term-mode-hook
		  vterm-mode-hook
		  eshell-mode-hook
		  org-mode-hook
		  ranger-mode-hook
		  org-agenda-mode-hook
		  image-mode-hook
		  dired-mode-hook
		  eww-mode-hook
		  nov-mode-hook
		  markdown-mode-hook
		  xwidget-webkit-mode-hook
		  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font

  #+BEGIN_SRC emacs-lisp
    ;; set font to FiraCode
    (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font-11"))
  #+END_SRC

** Set Theme

  #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :config
      (load-theme 'doom-henna t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))

    ;; remove background color on terminal emacs
    (defun on-frame-open (frame)
      (if (not (display-graphic-p frame))
          (set-face-background 'default "unspecified-bg" frame)))
    (on-frame-open (selected-frame))

    (defun on-after-init ()
      (unless (display-graphic-p (selected-frame))
        (set-face-background 'default "unspecified-bg" (selected-frame))))

    (add-hook 'after-make-frame-functions 'on-frame-open)
    (add-hook 'window-setup-hook 'on-after-init)
   #+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

   
   
** Useful Config

#+begin_src emacs-lisp
  (recentf-mode 1)
  (pixel-scroll-precision-mode 1)
  (use-package cursory
    :bind ("C-c P" . cursory-set-preset)
    :init
    ;; Set last preset or fall back to desired style from `cursory-presets'.
    (cursory-set-preset (or (cursory-restore-latest-preset) 'bar))
    :hook
    ;; The other side of `cursory-restore-latest-preset'.
    (kill-emacs-hook . cursory-store-latest-preset))


#+end_src

* Org Mode
** Org bullets

  #+BEGIN_SRC emacs-lisp
    ;; org bullet
    (use-package org-bullets
      :custom
      (org-bullets-bullet-list '("â˜¯" "â—‰" "â—‹" "âœ¸" "âœ¿" "âœœ" "â–¶"))
      (org-ellipsis "â¤µ")
      :hook (org-mode . org-bullets-mode))
  #+END_SRC

** Configure org

#+begin_src emacs-lisp
  (defun nate/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :ensure nil
    :custom
    (org-directory "~/Documents/Org")
    (org-log-into-drawer t)
    (org-deadline-warning-days 2)
    (org-return-follows-link  t)
    (org-hide-emphasis-markers nil)
    :config
    (setq org-list-demote-modify-bullet
          (quote (("+" . "-")
                  ("-" . "+")
                  ("*" . "-")
                  ("1." . "-")
                  ("1)" . "-")
                  ("A)" . "-")
                  ("B)" . "-")
                  ("a)" . "-")
                  ("b)" . "-")
                  ("A." . "-")
                  ("B." . "-")
                  ("a." . "-")
                  ("b." . "-")))))
#+end_src

#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([+]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â—¦"))))))
#+end_src

** Visual fill column

#+begin_src emacs-lisp
   (defun nate/org-mode-visual-fill ()
     "vertical column on the side"
     (interactive)
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook
    (org-mode . nate/org-mode-visual-fill)
    (Markdown-mode . nate/org-mode-visual-fill))
#+end_src

** Org tree slide

#+begin_src emacs-lisp
   (use-package org-tree-slide)
#+end_src

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/Documents/Org/Roam/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+end_src

** Org toc

#+begin_src emacs-lisp
  (use-package toc-org
  :defer t
  :hook ((org-mode . toc-org-mode)
         (markdown-mode . toc-org-mode)))
#+end_src

* Programming Stuff
** Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/Tools/yasnippet"))
    (yas-global-mode 1))
#+END_SRC
** Origami

#+begin_src emacs-lisp
  (use-package origami)
#+end_src

** Editor config

#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
    ("C-c p" . projectile-command-map)))

#+end_src

** Yaml

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** Json

#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src

** lua

#+begin_src emacs-lisp
  (use-package lua-mode)
#+end_src

** Web mode

#+begin_src emacs-lisp
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-attr-indent-offset 0)
  (setq web-mode-enable-auto-indentation t)
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-css-colorization t)
  
  (use-package web-mode
    :mode (("\\.js\\'" . web-mode)
           ("\\.jsx\\'" . web-mode)
           ("\\.ts\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.svelte\\'" . web-mode)
           ("\\.html\\'" . web-mode))
    :commands web-mode)
#+end_src

** Company

#+begin_src emacs-lisp
  (use-package company
    :config 
    (global-company-mode t)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+end_src

** Magit

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)))
#+end_src

** Prettier js

#+begin_src emacs-lisp
  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
            (funcall (cdr my-pair)))))

  (use-package prettier-js
    :ensure t)
  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.jsx?\\'" . prettier-js-mode))
                               (enable-minor-mode
                                '("\\.tsx?\\'" . prettier-js-mode))))
#+end_src

** RestClient

#+begin_src emacs-lisp
  (use-package restclient)
#+end_src

** DevDocs Browser

#+begin_src emacs-lisp
  (use-package devdocs-browser
    :defer t)
#+end_src

** Docker

#+begin_src emacs-lisp
  (use-package docker)
#+end_src

* Utils
** Pdf Tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+end_src

** Epub

#+begin_src emacs-lisp

  (defun my-centre-width ()
    "Return a fill column that makes centring pleasant regardless of screen size"
    (let ((window-width (window-width)))
      (floor (if (<= window-width (* 1.1 fill-column))
		 (* 0.9 window-width)
	       (max (/ window-width 2) fill-column)))))


  (defun my-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
			     :height 1.3)
    (setq fill-column (my-centre-width)
	      nov-text-width (- fill-column 2)
	      visual-fill-column-center-text t))

  (use-package nov
    :init
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    :hook 
    ((nov-mode . visual-line-mode)
     (nov-mode . visual-fill-column-mode)
     (nov-mode . my-nov-font-setup)
     (nov-mode . nate/org-mode-visual-fill)))
#+end_src

Simple function to hide ^M line ending (dos end of line). They appear on some Epub files and log files.

#+begin_src emacs-lisp
  (defun remove-dos-eol ()
    "Do not show ^M in files containing mixed UNIX and DOS line endings."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M []))
#+end_src

** Vterm

#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** Exec path

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Vertico

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)
    ;; Different scroll margin
    (setq vertico-scroll-margin 0)
    (setq vertico-resize t)
    (setq vertico-cycle t))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

** Consult

#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
	   ("C-c M-x" . consult-mode-command)
	   ("C-c h" . consult-history)
	   ("C-c k" . consult-kmacro)
	   ("C-c m" . consult-man)
	   ("C-c i" . consult-info)
	   ([remap Info-search] . consult-info)
	   ;; C-x bindings (ctl-x-map)
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ;; M-g bindings (goto-map)
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings (search-map)
	   ("M-s d" . consult-find)
	   ("M-s D" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src

** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** All the icons

#+begin_src emacs-lisp
    (use-package all-the-icons
      :if (display-graphic-p))

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Multiple Cursors

This is not very important but is cool to experiment with.
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<". mc/mark-all-like-this)))
#+end_src

** Expand Region

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("C-=" . er/expand-region)
           ("C--" . er/contract-region)))
#+end_src

** Ace-window

#+begin_src emacs-lisp
    (use-package ace-window
      :bind ("M-o" . ace-window)) 
#+end_src

** Avy

#+begin_src emacs-lisp
      (use-package avy
	:bind
	("C-;" . avy-goto-char)
	("C-:" . avy-goto-char-2)
	("M-g l" . avy-goto-line)
	("M-g t" . avy-goto-char-timer))

#+end_src

** Dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :custom ((dired-listing-switches "-alh --group-directories-first"))
    :hook (dired-mode . dired-hide-details-mode))

  ;; make the other window target
  (setq dired-dwim-target t)

  (use-package diredfl
    :ensure t
    :config
    (diredfl-global-mode 1))

  (use-package dired-git-info
    :ensure t
    :bind (:map dired-mode-map
                (")" . dired-git-info-mode)))

  (use-package dired-single
    :bind (:map dired-mode-map
                ("^" . dired-single-up-directory)
                ("<return>" . dired-single-buffer)))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :bind (:map dired-mode-map
                ("z" . dired-hide-dotfiles-mode)))
#+end_src

** Image mode

#+begin_src emacs-lisp

  (defun nate/set-wallpaper ()
  "Set the current file in the Image mode buffer as wallpaper."
  (interactive)
  (let ((current-file (buffer-file-name)))
    (if current-file
	(progn
	  (message "Setting %s as wallpaper" current-file)
	  (start-process "nate/set-wallpaper" "*nate/set-wallpaper-output*" "setbg" "-w" current-file))
      (error "No file associated with the current buffer"))))

  (use-package image
    :ensure nil
    :config
    (setq image-auto-resize 'fit-window)
    :bind (:map image-mode-map
		("W" . nate/set-wallpaper)))

#+end_src

